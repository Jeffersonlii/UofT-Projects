lower = qnorm(0.025, Bhat0s[i]+ Bhat1s[i] * X0, 5)
upper = qnorm(0.975, Bhat0s[i]+ Bhat1s[i] * X0, 5)
if (Ey > lower && Ey < upper){
numsWithinCI = numsWithinCI + 1
}
}
numsWithinCI
rnorm(1,0,5)
typeof(rnorm(1,0,5))
set.seed(1005057368)
Xs = c(4, 8, 12, 16, 20)
Sxx = 0
for (x in Xs) {
Sxx = Sxx + (x - mean(Xs))^2
}
Sxx
prob = pnorm(3, 4, sqrt(25/Sxx)) + (1-pnorm(5, 4, sqrt(25/Sxx)))
Xs = c(4, 8, 12, 16, 20)
errors = rnorm(5,0,5)
errors
Ys = rep(0, 5)
for (i in 1:length(Ys)) {
Ys[i] = 20 + 4*Xs[i] + errors[i]
}
Ys
Sxy = 0
for (i in 1:length(Ys)) {
Sxy = Sxy + (Xs[i] - mean(Xs))*(Ys[i] - mean(Ys))
}
Sxy
Bhat1 = Sxy / Sxx
Bhat0 = mean(Ys) - Bhat1*mean(Xs)
Bhat1
Bhat0
X0 = 10
Yhat0 =  Bhat0 + Bhat1 * X0
Yhat0
lower = qnorm(0.025, Bhat0+Bhat1 * X0, 5)
upper = qnorm(0.975, Bhat0+Bhat1 * X0, 5)
Bhat0s = rep(0,1000)
Bhat1s = rep(0,1000)
Xs = c(4, 8, 12, 16, 20)
for (i in 1:length(Bhat0s)) {
errors = rnorm(5,0,5)
Ys = rep(0, 5)
for (j in 1:length(Ys)) {
Ys[j] = 20 + 4*Xs[j] + errors[j]
}
fit = lm(formula = Ys ~ Xs)
Bhat0s[i] = fit$coefficients[1]
Bhat1s[i] = fit$coefficients[2]
}
hist(Bhat1s, xlab = "beta 1 hat")
mean(Bhat1s)
sd(Bhat1s)
hist(Bhat0s, xlab = "beta 0 hat")
mean(Bhat0s)
set.seed(1005057368)
Xs = c(4, 8, 12, 16, 20)
Sxx = 0
for (x in Xs) {
Sxx = Sxx + (x - mean(Xs))^2
}
Sxx
prob = pnorm(3, 4, sqrt(25/Sxx)) + (1-pnorm(5, 4, sqrt(25/Sxx)))
Xs = c(4, 8, 12, 16, 20)
errors = rnorm(5,0,5)
errors
Ys = rep(0, 5)
for (i in 1:length(Ys)) {
Ys[i] = 20 + 4*Xs[i] + errors[i]
}
Ys
Sxy = 0
for (i in 1:length(Ys)) {
Sxy = Sxy + (Xs[i] - mean(Xs))*(Ys[i] - mean(Ys))
}
Sxy
Bhat1 = Sxy / Sxx
Bhat0 = mean(Ys) - Bhat1*mean(Xs)
Bhat1
Bhat0
X0 = 10
Yhat0 =  Bhat0 + Bhat1 * X0
Yhat0
lower = qnorm(0.025, Bhat0+Bhat1 * X0, 5)
upper = qnorm(0.975, Bhat0+Bhat1 * X0, 5)
Bhat0s = rep(0,1000)
Bhat1s = rep(0,1000)
Xs = c(4, 8, 12, 16, 20)
for (i in 1:length(Bhat0s)) {
errors = rnorm(5,0,5)
Ys = rep(0, 5)
for (j in 1:length(Ys)) {
Ys[j] = 20 + 4*Xs[j] + errors[j]
}
fit = lm(formula = Ys ~ Xs)
Bhat0s[i] = fit$coefficients[1]
Bhat1s[i] = fit$coefficients[2]
}
hist(Bhat1s, xlab = "beta 1 hat")
mean(Bhat1s)
sd(Bhat1s)
hist(Bhat0s, xlab = "beta 0 hat")
mean(Bhat0s)
sd(Bhat0s)
Ey = 20 + 4 * X0 + rnorm(1,0,5)
numsWithinCI = 0
for (i in 1:length(Bhat0s)) {
lower = qnorm(0.025, Bhat0s[i]+ Bhat1s[i] * X0, 5)
upper = qnorm(0.975, Bhat0s[i]+ Bhat1s[i] * X0, 5)
if (Ey > lower && Ey < upper){
numsWithinCI = numsWithinCI + 1
}
}
numsWithinCI
Ey = 20 + 4 * X0
numsWithinCI = 0
for (i in 1:length(Bhat0s)) {
lower = qnorm(0.025, Bhat0s[i]+ Bhat1s[i] * X0, 5)
upper = qnorm(0.975, Bhat0s[i]+ Bhat1s[i] * X0, 5)
if (Ey > lower && Ey < upper){
numsWithinCI = numsWithinCI + 1
}
}
numsWithinCI
numsWithinCI = 0
for (i in 1:length(Bhat0s)) {
Ey =  Bhat0s[i]+ Bhat1s[i] * X0
lower = qnorm(0.025, Bhat0s[i]+ Bhat1s[i] * X0, 5)
upper = qnorm(0.975, Bhat0s[i]+ Bhat1s[i] * X0, 5)
if (Ey > lower && Ey < upper){
numsWithinCI = numsWithinCI + 1
}
}
numsWithinCI
fit = lm(formula = Ys ~ Xs)
fit = lm(formula = Ys ~ Xs)
summary(fit)
fit = lm(formula = Ys ~ Xs)
summary(fit)
predict(fit, data.frame(X=10), interval="confidence")
set.seed(1005057368)
Xs = c(4, 8, 12, 16, 20)
Sxx = 0
for (x in Xs) {
Sxx = Sxx + (x - mean(Xs))^2
}
Sxx
prob = pnorm(3, 4, sqrt(25/Sxx)) + (1-pnorm(5, 4, sqrt(25/Sxx)))
Xs = c(4, 8, 12, 16, 20)
errors = rnorm(5,0,5)
errors
Ys = rep(0, 5)
for (i in 1:length(Ys)) {
Ys[i] = 20 + 4*Xs[i] + errors[i]
}
Ys
Sxy = 0
for (i in 1:length(Ys)) {
Sxy = Sxy + (Xs[i] - mean(Xs))*(Ys[i] - mean(Ys))
}
Sxy
Bhat1 = Sxy / Sxx
Bhat0 = mean(Ys) - Bhat1*mean(Xs)
Bhat1
Bhat0
X0 = 10
Yhat0 =  Bhat0 + Bhat1 * X0
Yhat0
fit = lm(formula = Ys ~ Xs)
summary(fit)
predict(fit, data.frame(X=10), interval="confidence")
Bhat0s = rep(0,1000)
Bhat1s = rep(0,1000)
Xs = c(4, 8, 12, 16, 20)
for (i in 1:length(Bhat0s)) {
errors = rnorm(5,0,5)
Ys = rep(0, 5)
for (j in 1:length(Ys)) {
Ys[j] = 20 + 4*Xs[j] + errors[j]
}
fit = lm(formula = Ys ~ Xs)
Bhat0s[i] = fit$coefficients[1]
Bhat1s[i] = fit$coefficients[2]
}
hist(Bhat1s, xlab = "beta 1 hat")
mean(Bhat1s)
sd(Bhat1s)
hist(Bhat0s, xlab = "beta 0 hat")
mean(Bhat0s)
sd(Bhat0s)
numsWithinCI = 0
for (i in 1:length(Bhat0s)) {
Ey =  Bhat0s[i] + Bhat1s[i] * X0
lower = qnorm(0.025, Bhat0s[i]+ Bhat1s[i] * X0, 5)
upper = qnorm(0.975, Bhat0s[i]+ Bhat1s[i] * X0, 5)
if (Ey > lower && Ey < upper){
numsWithinCI = numsWithinCI + 1
}
}
numsWithinCI
fit = lm(formula = Ys ~ Xs)
summary(fit)
new.data = data.frame(X=10)
predict(fit, new.data, interval="confidence")
fit = lm(formula = Ys ~ Xs)
summary(fit)
predict(fit, data.frame(X=10), interval="confidence")
set.seed(1005057368)
Xs = c(4, 8, 12, 16, 20)
Sxx = 0
for (x in Xs) {
Sxx = Sxx + (x - mean(Xs))^2
}
Sxx
prob = pnorm(3, 4, sqrt(25/Sxx)) + (1-pnorm(5, 4, sqrt(25/Sxx)))
Xs = c(4, 8, 12, 16, 20)
errors = rnorm(5,0,5)
errors
Ys = rep(0, 5)
for (i in 1:length(Ys)) {
Ys[i] = 20 + 4*Xs[i] + errors[i]
}
Ys
Sxy = 0
for (i in 1:length(Ys)) {
Sxy = Sxy + (Xs[i] - mean(Xs))*(Ys[i] - mean(Ys))
}
Sxy
Bhat1 = Sxy / Sxx
Bhat0 = mean(Ys) - Bhat1*mean(Xs)
Bhat1
Bhat0
X0 = 10
Yhat0 =  Bhat0 + Bhat1 * X0
Yhat0
fit = lm(formula = Ys ~ Xs)
summary(fit)
predict(fit, data.frame(X=10), interval="confidence")
Bhat0s = rep(0,1000)
Bhat1s = rep(0,1000)
Xs = c(4, 8, 12, 16, 20)
for (i in 1:length(Bhat0s)) {
errors = rnorm(5,0,5)
Ys = rep(0, 5)
for (j in 1:length(Ys)) {
Ys[j] = 20 + 4*Xs[j] + errors[j]
}
fit = lm(formula = Ys ~ Xs)
Bhat0s[i] = fit$coefficients[1]
Bhat1s[i] = fit$coefficients[2]
}
hist(Bhat1s, xlab = "beta 1 hat")
mean(Bhat1s)
sd(Bhat1s)
hist(Bhat0s, xlab = "beta 0 hat")
mean(Bhat0s)
sd(Bhat0s)
numsWithinCI = 0
for (i in 1:length(Bhat0s)) {
Ey =  Bhat0s[i] + Bhat1s[i] * X0
lower = qnorm(0.025, Bhat0s[i]+ Bhat1s[i] * X0, 5)
upper = qnorm(0.975, Bhat0s[i]+ Bhat1s[i] * X0, 5)
if (Ey > lower && Ey < upper){
numsWithinCI = numsWithinCI + 1
}
}
numsWithinCI
fit = lm(formula = Ys ~ Xs)
summary(fit)
predict(fit, data.frame(Xs=10), interval="confidence")
fit = lm(formula = Ys ~ Xs)
CI = predict(fit, data.frame(Xs=10), interval="confidence")
set.seed(1005057368)
Xs = c(4, 8, 12, 16, 20)
Sxx = 0
for (x in Xs) {
Sxx = Sxx + (x - mean(Xs))^2
}
Sxx
prob = pnorm(3, 4, sqrt(25/Sxx)) + (1-pnorm(5, 4, sqrt(25/Sxx)))
Xs = c(4, 8, 12, 16, 20)
errors = rnorm(5,0,5)
errors
Ys = rep(0, 5)
for (i in 1:length(Ys)) {
Ys[i] = 20 + 4*Xs[i] + errors[i]
}
Ys
Sxy = 0
for (i in 1:length(Ys)) {
Sxy = Sxy + (Xs[i] - mean(Xs))*(Ys[i] - mean(Ys))
}
Sxy
Bhat1 = Sxy / Sxx
Bhat0 = mean(Ys) - Bhat1*mean(Xs)
Bhat1
Bhat0
X0 = 10
Yhat0 =  Bhat0 + Bhat1 * X0
Yhat0
fit = lm(formula = Ys ~ Xs)
CI = predict(fit, data.frame(Xs=10), interval="confidence")
Bhat0s = rep(0,1000)
Bhat1s = rep(0,1000)
fits = rep(0,1000)
Xs = c(4, 8, 12, 16, 20)
for (i in 1:length(Bhat0s)) {
errors = rnorm(5,0,5)
Ys = rep(0, 5)
for (j in 1:length(Ys)) {
Ys[j] = 20 + 4*Xs[j] + errors[j]
}
fit = lm(formula = Ys ~ Xs)
Bhat0s[i] = fit$coefficients[1]
Bhat1s[i] = fit$coefficients[2]
fits[i] = fit
}
hist(Bhat1s, xlab = "beta 1 hat")
mean(Bhat1s)
sd(Bhat1s)
hist(Bhat0s, xlab = "beta 0 hat")
mean(Bhat0s)
sd(Bhat0s)
numsWithinCI = 0
for (i in 1:length(fits)) {
Ey =  Bhat0s[i] + Bhat1s[i] * X0
CI = predict(fits[i], data.frame(Xs=10), interval="confidence")
lower = CI[2]
upper = CI[3]
if (Ey > lower && Ey < upper){
numsWithinCI = numsWithinCI + 1
}
}
numsWithinCI = 0
for (i in 1:length(lowers)) {
Ey =  Bhat0s[i] + Bhat1s[i] * X0
if (Ey > lowers[i] && Ey < uppers[i]){
numsWithinCI = numsWithinCI + 1
}
}
set.seed(1005057368)
Xs = c(4, 8, 12, 16, 20)
Sxx = 0
for (x in Xs) {
Sxx = Sxx + (x - mean(Xs))^2
}
Sxx
prob = pnorm(3, 4, sqrt(25/Sxx)) + (1-pnorm(5, 4, sqrt(25/Sxx)))
Xs = c(4, 8, 12, 16, 20)
errors = rnorm(5,0,5)
errors
Ys = rep(0, 5)
for (i in 1:length(Ys)) {
Ys[i] = 20 + 4*Xs[i] + errors[i]
}
Ys
Sxy = 0
for (i in 1:length(Ys)) {
Sxy = Sxy + (Xs[i] - mean(Xs))*(Ys[i] - mean(Ys))
}
Sxy
Bhat1 = Sxy / Sxx
Bhat0 = mean(Ys) - Bhat1*mean(Xs)
Bhat1
Bhat0
X0 = 10
Yhat0 =  Bhat0 + Bhat1 * X0
Yhat0
fit = lm(formula = Ys ~ Xs)
CI = predict(fit, data.frame(Xs=10), interval="confidence")
Bhat0s = rep(0,1000)
Bhat1s = rep(0,1000)
lowers = rep(0,1000)
uppers = rep(0,1000)
Xs = c(4, 8, 12, 16, 20)
for (i in 1:length(Bhat0s)) {
errors = rnorm(5,0,5)
Ys = rep(0, 5)
for (j in 1:length(Ys)) {
Ys[j] = 20 + 4*Xs[j] + errors[j]
}
fit = lm(formula = Ys ~ Xs)
Bhat0s[i] = fit$coefficients[1]
Bhat1s[i] = fit$coefficients[2]
CI = predict(fit, data.frame(Xs=10), interval="confidence")
lowers[i] = CI[2]
uppers[i] = CI[3]
}
hist(Bhat1s, xlab = "beta 1 hat")
mean(Bhat1s)
sd(Bhat1s)
hist(Bhat0s, xlab = "beta 0 hat")
mean(Bhat0s)
sd(Bhat0s)
numsWithinCI = 0
for (i in 1:length(lowers)) {
Ey =  Bhat0s[i] + Bhat1s[i] * X0
if (Ey > lowers[i] && Ey < uppers[i]){
numsWithinCI = numsWithinCI + 1
}
}
numsWithinCI
numsWithinCI = 0
for (i in 1:length(lowers)) {
Ey =  Bhat0s[i] + Bhat1s[i] * X0
Ey = 60
if (Ey > lowers[i] && Ey < uppers[i]){
numsWithinCI = numsWithinCI + 1
}
}
numsWithinCI
Xs = c(3,5,4,6,7)
Ys = c(4,6.5,5,7,7.5)
fit = lm(formula = Ys ~ Xs)
Xs = c(3,5,4,6,7)
Ys = c(4,6.5,5,7,7.5)
fit = lm(formula = Ys ~ Xs,x=TRUE)
Xs = c(3,5,4,6,7)
Ys = c(4,6.5,5,7,7.5)
fit = lm(formula = Ys ~ Xs,x=TRUE)
str(fit)
Xs = c(3,5,4,6,7)
Ys = c(4,6.5,5,7,7.5)
fit = lm(formula = Ys ~ Xs,x=TRUE)
fit
Xs = c(3,5,4,6,7)
Ys = c(4,6.5,5,7,7.5)
fit = lm(formula = Ys ~ Xs,x=TRUE)
fit
model.matrix(formula = Ys ~ Xs)
Xs = c(3,5,4,6,7)
Ys = c(4,6.5,5,7,7.5)
fit = lm(formula = Ys ~ Xs,x=TRUE)
fit
model.matrix(fit)
Xs = c(3,5,4,6,7)
Ys = c(4,6.5,5,7,7.5)
fit = lm(formula = Ys ~ Xs,x=TRUE)
model.matrix(fit)
Xs = c(3,5,4,6,7)
Ys = c(4,6.5,5,7,7.5)
fit = lm(formula = Ys ~ Xs,x=TRUE)
model.matrix(fit)
fit = lm(formula = Ys ~ Xs,x=TRUE)
bhat0 = fit$coefficients[1]
bhat2 = fit$coefficients[2]
bhat0
bhat2
fit = lm(formula = Ys ~ Xs,x=TRUE)
bhat0 = fit$coefficients[1]
bhat1 = fit$coefficients[2]
bhat0
bhat1
Xs = c(3,5,4,6,7)
Ys = c(4,6.5,5,7,7.5)
fit = lm(formula = Ys ~ Xs,x=TRUE)
designMatrix = model.matrix(fit)
designMatrix
designMatrix%*%designMatrix
typeof(designMatrix)
matrix(designMatrix, nrow = 1, ncol = 1, byrow = FALSE,
dimnames = NULL)
matrix(designMatrix, nrow = 5, ncol = 2, byrow = FALSE,
dimnames = NULL)
matrix(designMatrix, nrow = 5, ncol = 2, byrow = FALSE)
Xs = c(3,5,4,6,7)
Ys = c(4,6.5,5,7,7.5)
fit = lm(formula = Ys ~ Xs,x=TRUE)
designMatrix = matrix(model.matrix(fit), nrow = 5, ncol = 2, byrow = FALSE)
designMatrix
fit = lm(formula = Ys ~ Xs,x=TRUE)
bhat0 = fit$coefficients[1]
bhat1 = fit$coefficients[2]
bhat0
bhat1
matrix(designMatrix, nrow = 5, ncol = 2, byrow = FALSE)
designMatrix
designMatrix%*%designMatrix
designMatrix%*%t(designMatrix)
fit = lm(formula = Ys ~ Xs,x=TRUE)
bhat0 = fit$coefficients[1]
bhat1 = fit$coefficients[2]
bhat0
bhat1
coeffs = solve(t(designMatrix)%*%designMatrix)%*%t(designMatrix)%*%Ys
fit = lm(formula = Ys ~ Xs,x=TRUE)
bhat0 = fit$coefficients[1]
bhat1 = fit$coefficients[2]
bhat0
bhat1
coeffs = solve(t(designMatrix)%*%designMatrix)%*%t(designMatrix)%*%Ys
coeffs
varCovarMatrix = solve(t(designMatrix)%*%designMatrix)
varCovarMatrix = solve(t(designMatrix)%*%designMatrix)
varCovarMatrix
varCovarMatrix[1][2]
varCovarMatrix[2][1]
varCovarMatrix[1][2]
#varCovarMatrix[2][1]
varCovarMatrix[1,2]
varCovarMatrix[2,1]
varCovarMatrix[1,2]
H = designMatrixsolve%*%(t(designMatrix)%*%designMatrix)%*%t(designMatrix)
H = designMatrix%*%solve(t(designMatrix)%*%designMatrix)%*%t(designMatrix)
H
VarE = (1 - H)
VarE
sigma2 = 4
VarE = (1 - H)*sigma2
VarE
